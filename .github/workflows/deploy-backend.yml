name: Deploy Backend

on:
  workflow_dispatch:
  push:
    branches: [main]
    paths:
      - 'backend/**'
      - '.github/workflows/deploy-backend.yml'
      - 'scripts/**'

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GAR_LOCATION: us-central1
  REPOSITORY: lens
  SERVICE: lens-api
  REGION: us-central1

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    
    outputs:
      backend-image: ${{ steps.backend-image.outputs.image }}
      frontend-image: ${{ steps.frontend-image.outputs.image }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    
    - name: Google Auth
      id: auth
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
    
    - name: Configure Docker for GAR
      run: |
        gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev
    
    - name: Build and Push Backend
      id: backend-image
      run: |
        IMAGE="${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/backend:${{ github.sha }}"
        docker build -t $IMAGE ./backend
        docker push $IMAGE
        echo "image=$IMAGE" >> $GITHUB_OUTPUT
        echo "Backend image: $IMAGE" >> $GITHUB_STEP_SUMMARY
    
    - name: Build and Push Frontend
      id: frontend-image
      run: |
        IMAGE="${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/frontend:${{ github.sha }}"
        docker build -f ./frontend/Dockerfile.simple -t $IMAGE ./frontend
        docker push $IMAGE
        echo "image=$IMAGE" >> $GITHUB_OUTPUT
        echo "Frontend image: $IMAGE" >> $GITHUB_STEP_SUMMARY

  deploy-backend:
    needs: build-and-push
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    
    outputs:
      url: ${{ steps.deploy.outputs.url }}
    
    steps:
    - name: Google Auth
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    
    - name: Debug outputs
      run: |
        echo "Backend image: ${{ needs.build-and-push.outputs.backend-image }}"
    
    - name: Deploy to Cloud Run
      id: deploy
      uses: google-github-actions/deploy-cloudrun@v1
      with:
        service: ${{ env.SERVICE }}
        image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/backend:${{ github.sha }}
        region: ${{ env.REGION }}
        env_vars: |
          KAFKA_BOOTSTRAP_SERVERS=${{ secrets.KAFKA_BOOTSTRAP_SERVERS }}
          KAFKA_API_KEY=${{ secrets.KAFKA_API_KEY }}
          KAFKA_API_SECRET=${{ secrets.KAFKA_API_SECRET }}
          KAFKA_SECURITY_PROTOCOL=SASL_SSL
          KAFKA_SASL_MECHANISM=PLAIN
          MODEL_REGISTRY_PATH=/app/model_registry
          ENABLE_METRICS=true
        flags: |
          --port=8000
          --cpu=2
          --memory=2Gi
          --min-instances=1
          --max-instances=10
          --concurrency=100
          --allow-unauthenticated
    
    - name: Show Output
      run: |
        echo "Service URL: ${{ steps.deploy.outputs.url }}" >> $GITHUB_STEP_SUMMARY
        echo "Deployment successful! ðŸš€" >> $GITHUB_STEP_SUMMARY
    
    - name: Run Smoke Test
      run: |
        sleep 10  # Wait for service to be ready
        curl -f "${{ steps.deploy.outputs.url }}/health" || exit 1
        echo "Health check passed âœ…" >> $GITHUB_STEP_SUMMARY

  run-probes:
    needs: deploy-backend
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        pip install httpx confluent-kafka
    
    - name: Run probe script
      env:
        API_URL: ${{ needs.deploy-backend.outputs.url }}
        KAFKA_BOOTSTRAP_SERVERS: ${{ secrets.KAFKA_BOOTSTRAP_SERVERS }}
        KAFKA_API_KEY: ${{ secrets.KAFKA_API_KEY }}
        KAFKA_API_SECRET: ${{ secrets.KAFKA_API_SECRET }}
      run: |
        python scripts/probe.py --runs 10