name: CI Pipeline (Minimal)

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install backend dependencies
      working-directory: backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov
    
    - name: Run backend tests
      working-directory: backend
      run: |
        # Run tests with basic coverage
        pytest tests/ -v --tb=short || true
        
    - name: Check backend can start
      working-directory: backend
      run: |
        # Just verify the app can import without errors
        python -c "from app.main import app; print('Backend imports successfully')"

  frontend-build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js 18
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    
    - name: Install frontend dependencies
      working-directory: frontend
      run: |
        npm install
    
    - name: Build frontend
      working-directory: frontend
      run: |
        npm run build || true
        
  docker-build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Build backend Docker image
      run: |
        docker build -t movielens-backend -f backend/Dockerfile backend/
        
    - name: Build frontend Docker image  
      run: |
        docker build -t movielens-frontend -f frontend/Dockerfile frontend/
        
    - name: Test backend container starts
      run: |
        docker run -d --name test-backend \
          -e PYTHONUNBUFFERED=1 \
          -p 8000:8000 \
          movielens-backend
        
        # Wait for startup
        sleep 10
        
        # Check if running
        docker ps | grep test-backend
        
        # Check health endpoint
        curl -f http://localhost:8000/healthz || true
        
        # Clean up
        docker stop test-backend
        docker rm test-backend